// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                           String               @id @default(auto()) @map("_id") @db.ObjectId
  username                     String
  displayName                  String               @unique
  email                        String?              @unique
  externalUserId               String               @unique
  emailVerified                DateTime?
  image                        String?
  hashedPassword               String?
  createdAt                    DateTime             @default(now())
  updatedAt                    DateTime             @updatedAt
  CreatedServer                Server[]             @relation("CreatedBy")
  channels                     Channel[]
  members                      Member[]
  directMessage                DirectMessage[]
  socket_id                    String?
  status                       String               @default("Offline")
  directconversationsInitiated DirectConversation[] @relation("userOne")
  directconversationsReceived  DirectConversation[] @relation("userTwo")
  sender                       FriendRequest[]      @relation("sender")
  reciver                      FriendRequest[]      @relation("reciver")
  friends                      Friends[]            @relation("UserFriends")
}

model Server {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  creatorId  String?   @map("creatorId") @db.ObjectId
  Creater    User?     @relation("CreatedBy", fields: [creatorId], references: [id], onDelete: Cascade)
  channels   Channel[]
  inviteCode String    @unique
  members    Member[]
  imgUrl     String
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(auto()) @map("_id") @db.ObjectId
  role MemberRole @default(GUEST)

  userId  String @db.ObjectId()
  profile User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String @db.ObjectId()
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages       Message[]
  memberMessages MemberMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived  Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(auto()) @map("_id") @db.ObjectId
  name String
  type ChannelType @default(TEXT)

  profileId String @db.ObjectId()
  profile   User   @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String @db.ObjectId()
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  content String?

  fileUrl String?

  memberId String @db.ObjectId()
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String  @db.ObjectId()
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  memberOneId String @db.ObjectId()
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String @db.ObjectId()
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  memberMessages MemberMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

model MemberMessage {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  content String?
  fileUrl String?

  memberId String @db.ObjectId()
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String       @db.ObjectId()
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}

model DirectMessage {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  content String?
  fileUrl String?

  userId String @db.ObjectId()
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  conversationId     String             @db.ObjectId()
  directConversation DirectConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([conversationId])
}

model DirectConversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  ConversationOneId String @db.ObjectId()
  conversationOne   User   @relation("userOne", fields: [ConversationOneId], references: [id], onDelete: Cascade)

  ConversationTwoId String @db.ObjectId()
  conversationTwo   User   @relation("userTwo", fields: [ConversationTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@unique([ConversationOneId, ConversationTwoId])
  @@index([ConversationTwoId])
}

model FriendRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId  String   @db.ObjectId()
  sender    User     @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  reciverId String   @db.ObjectId()
  reciver   User     @relation("reciver", fields: [reciverId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([senderId, reciverId])
}

model Friends {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  friendId  String   @db.ObjectId()
  friend    User     @relation("UserFriends", fields: [friendId], references: [id])
  userId    String   @db.ObjectId()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
